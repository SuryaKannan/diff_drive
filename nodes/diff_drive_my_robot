#!/usr/bin/env python3

import rospy 
from std_msgs.msg import Int32
import RPi.GPIO as GPIO
from actionlib_msgs.msg import GoalID
from std_msgs.msg import Float32

class MyRobotGPIO():
    def __init__(self):
        self.outR = 32
        self.outL = 33
        self.dirR = 11
        self.dirL = 12
        GPIO.setmode(GPIO.BOARD) #use numbering system on board 
        GPIO.setup(self.outR,GPIO.OUT) # similar to arduino
        GPIO.setup(self.dirR,GPIO.OUT)
        GPIO.setup(self.outL,GPIO.OUT) 
        GPIO.setup(self.dirL,GPIO.OUT)
        self.pwmR = GPIO.PWM(self.outR,100) 
        self.pwmR.start(0)
        self.pwmR.ChangeDutyCycle(0)
        self.pwmL = GPIO.PWM(self.outL,100) 
        self.pwmL.start(0)
        self.pwmL.ChangeDutyCycle(0)
        GPIO.output(self.dirR,True)
        GPIO.output(self.dirL,True)
        

class MyRobotNode():
    def __init__(self):
        rospy.init_node('diff_drive_my_robot')
        rospy.Subscriber('/lwheel_desired_rate', Int32, self.leftCallback)
        rospy.Subscriber('/rwheel_desired_rate', Int32, self.rightCallback)
        rospy.Subscriber('/diff_drive_go_to_goal/distance_to_goal',Float32,self.dist_to_goal)
        self.goal_reached = rospy.Publisher('/diff_drive_go_to_goal/cancel',GoalID,queue_size=10)
        self.stopped = True
        self.gpio = MyRobotGPIO()

    def dist_to_goal(self,dist):
        self.stopped = False
        if dist.data < 0.05:
            cancel = GoalID()
            cancel.stamp = rospy.Time.now()
            cancel.id = ''
            self.goal_reached.publish(cancel)
            self.gpio.pwmL.ChangeDutyCycle(0)
            self.gpio.pwmR.ChangeDutyCycle(0)
            self.stopped = True

    def leftCallback(self,left_data):
        if self.stopped == False:
            self.gpio.pwmL.ChangeDutyCycle(int(self.pwm_map(left_data.data)))
            #print("left: ",int(self.pwm_map(left_data.data)))
        
    def rightCallback(self,right_data):
         if self.stopped == False:
            self.gpio.pwmR.ChangeDutyCycle(int(self.pwm_map(right_data.data)))
            #print("right: ",int(self.pwm_map(right_data.data)))
        
    def pwm_map(self,tick_rate):
        if tick_rate > 0:
            return round((95/46)*tick_rate+5)

if __name__ == '__main__':
    try:
        my_robot = MyRobotNode()
        rospy.spin()
    except KeyboardInterrupt: # If CTRL+C is pressed, exit cleanly:
        print("Keyboard interrupt")
    finally:
        GPIO.cleanup() # clear pin config 
